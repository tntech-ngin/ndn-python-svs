name: Update version and publish package to PyPi

on:
  push:
    branches:
      - master
      - main
      - traditional

jobs:
  update-version:
    name: Update Version
    runs-on: ubuntu-latest
    if: "contains(github.event.worflow_run.head_commit, 'Bump version to')"
    outputs:
      new_pkg_version: ${{ steps.version.outputs.pkg_version }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Git identity
        run: |
          git config --global user.email "gportdev@gmail.com"
          git config --global user.name "Gabriel Porteiro"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Determine version bump
        id: version
        run: |
          bump_message="Bump version to"
          
          # Get the commit messages for the last 10 commits
          commit_messages=$(git log -n 10 --pretty=format:%B)
          
          echo "Commit messages: $commit_messages"
          
          new_version=""
          new_version=$(echo "$commit_messages" | grep -oP "$bump_message \K[0-9]+\.[0-9]+\.[0-9]+" | sort -V | tail -n 1)
          
          if [[ $new_version ]]; then
            echo "Version bump detected: $new_version"
            echo "pkg_version=$new_version" >> $GITHUB_OUTPUT
          else
            echo "No version bump found in the commit messages."
            exit 0
          fi

  build:
    name: Build distribution ðŸ“¦
    needs: update-version
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install pypa/build
        run: python3 -m pip install build --user
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
  publish-to-pypi:
    name: Publish package to PyPI
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
  github-release:
    name: Sign package with Sigstore and upload them to GitHub Release
    needs: [update-version, publish-to-pypi]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: ./dist/*.tar.gz ./dist/*.whl

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
          version: ${{needs.update-version.outputs.new_pkg_version}}
        run: |
          echo "Creating release for version: $version"
          if [ -z "$version" ]; then
            echo "Error: version is not set."
            exit 1
          fi
          gh release create "$version" --repo "${{ github.repository }}" --notes "Release version $version"

      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: gh release upload '${{ github.ref_name }}' dist/** --repo '${{ github.repository }}'